import pandas as pd
import numpy as np

# 入力 ================================================================
df = pd.DataFrame([[0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100],
                   [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100],
                   [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100],
                   [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100],
                   [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100],
                   [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100],
                   [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100], [0, 100]],
                  columns=['min', 'max'])

df = pd.DataFrame([[0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2],
                   [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2],
                   [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2],
                   [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2],
                   [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2],
                   [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2],
                   [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2]],
                  columns=['min', 'max'])


# df = pd.DataFrame([[20, 100], [20, 100], [20, 100], [20, 100], [20, 100]],
#                   columns=['min', 'max'])

depth_max = df.shape[0]  # 生成する乱数列長

#  ================================================================
ans_all = []  # 条件を満たすものを保存するリスト
ans = []  # dfs ないで用いるリスト

# 枝刈のための制限　=============================================
limit1 = 100  # 生成するリストの値の合計値
limit_max = [0]
limit_min = [0]

for i in range(df.shape[0]):
    limit_max.append(limit_max[-1] + df.iloc[i, 1])
    limit_min.append(limit_min[-1] + df.iloc[i, 0])


# ==================================================


def dfs(depth=0, total=0):
    # print(f'depth: {depth}, total: {total}, ans: {ans}')
    # 枝刈
    if total > limit1:
        return

    if total + limit_max[- (depth + 1)] < limit1:
        return

    if total + limit_min[- (depth + 1)] > limit1:
        return

    # 終端条件
    if depth == depth_max:
        ans_all.append(ans.copy())
        return

    for i in range(df.iloc[0, 0], df.iloc[0, 1] + 1):
        ans.append(i)

        dfs(depth=depth+1, total=total+i)

        ans.pop()

    return


dfs(0, 0)

print(ans_all)
